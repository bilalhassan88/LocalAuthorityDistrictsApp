@page "/"
@layout MinimalLayout
@using LocalAuthorityDistricts.Application
@using LocalAuthorityDistricts.Domain
@using LocalAuthorityDistricts.Presentation.BlazorServer.Configuration
@using Microsoft.Extensions.Options
@inject IGeoJsonService GeoJsonService
@inject ICityService CityService
@inject IJSRuntime JS
@inject IOptions<ChunkSettings> ChunkSettings
@inject IOptions<MapboxSettings> MapboxSettings


<h3>Local Authority Districts </h3>

@if (isCitiesLoading)
{
    <div class="loader-overlay">
        <div class="loader">Loading ...</div>
    </div>
}

<label for="cityDropdown">Select Cities:</label>
<select id="cityDropdown" multiple="multiple" style="width: 100%;"></select>
<button @onclick="InvokeSearch">Search by Selected Cities</button>
<button @onclick="HideAll">Hide All</button>
<button @onclick="Reload">Reload</button>

<div id="map" style="width: 100%; height: 600px;"></div>

@if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}

@code {

    private List<Feature> displayedFeatures = new();
    private string? errorMessage;
    private CancellationTokenSource? cts;
    private List<City> cities = new();
    private bool isCitiesLoading = true;
    private string mapboxAccessToken => MapboxSettings.Value.AccessToken;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCities(); 
            isCitiesLoading = false;
            StateHasChanged();

            // Continue with map initialization and district loading.
            await InitializeMap();
            await LoadAllDistricts();
        }
    }

    private async Task InitializeMap()
    {
        try
        {
            await JS.InvokeVoidAsync("mapboxInterop.initializeMap", mapboxAccessToken, "map");
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to initialize map: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task LoadAllDistricts()
    {
        cts?.Cancel();
        cts = new CancellationTokenSource();

        try
        {
            displayedFeatures.Clear();
            errorMessage = null;
            StateHasChanged();

            await foreach (var feature in GeoJsonService.GetAllDistrictsAsync().WithCancellation(cts.Token))
            {
                if (cts.Token.IsCancellationRequested)
                {
                    break;
                }

                displayedFeatures.Add(feature);

                if (displayedFeatures.Count % ChunkSettings.Value.ChunkSize == 0)
                {
                    await UpdateMapAsync();
                }
            }

            if (!cts.Token.IsCancellationRequested)
            {
                await UpdateMapAsync();
            }
        }
        catch (OperationCanceledException)
        {
            // Ignore cancellation
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load districts: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task InvokeSearch()
    {
        await HideAll();

        var selectedCityValues = await JS.InvokeAsync<string[]>("getSelectedCities", "#cityDropdown");

        if (selectedCityValues == null || !selectedCityValues.Any())
        {
            errorMessage = "Please select at least one city.";
            StateHasChanged();
            return;
        }

        cts = new CancellationTokenSource();

        try
        {
            errorMessage = null;
            StateHasChanged();

            // Use the selected city values as the filter criteria.
            var names = selectedCityValues.ToList();

            await foreach (var feature in GeoJsonService.FilterByNameAsync(names).WithCancellation(cts.Token))
            {
                if (cts.Token.IsCancellationRequested)
                {
                    break;
                }

                displayedFeatures.Add(feature);
                await UpdateMapAsync();
            }

            if (!cts.Token.IsCancellationRequested)
            {
                await UpdateMapAsync();
            }
        }
        catch (OperationCanceledException)
        {
            // Ignore cancellation.
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to search districts: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task HideAll()
    {
        try
        {
            cts?.Cancel();
            displayedFeatures.Clear();
            await JS.InvokeVoidAsync("mapboxInterop.removeLayer", "districtsLayer");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to hide districts: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task Reload()
    {
        await LoadAllDistricts();
    }

    private async Task UpdateMapAsync()
    {
        try
        {
            var geoJson = new
            {
                type = "FeatureCollection",
                features = displayedFeatures
            };

            await JS.InvokeVoidAsync("mapboxInterop.addGeoJsonLayer", "districtsLayer", geoJson);
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to update map: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task LoadCities()
    {
        try
        {
            cities = await CityService.GetCitiesAsync();
            await JS.InvokeVoidAsync("initializeCityDropdown", cities);
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load cities: {ex.Message}";
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        cts?.Cancel();
    }
}
