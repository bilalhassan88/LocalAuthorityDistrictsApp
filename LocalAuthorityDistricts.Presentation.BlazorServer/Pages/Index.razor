@page "/"
@layout MinimalLayout
@using LocalAuthorityDistricts.Application
@using LocalAuthorityDistricts.Domain
@inject IGeoJsonService GeoJsonService
@inject IJSRuntime JS

<h3>Local Authority Districts (Read-Only)</h3>

<input type="text" @bind="searchQuery" placeholder="Search by name (comma-separated)..." />
<button @onclick="InvokeSearch">Search</button>
<button @onclick="HideAll">Hide All</button>
<button @onclick="Reload">Reload</button>

<div id="map" style="width: 100%; height: 600px;"></div>

@if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}

@code {
    private List<Feature> displayedFeatures = new();
    private string searchQuery = string.Empty;
    private string? errorMessage;
    private CancellationTokenSource? cts;

    private readonly string mapboxAccessToken = "pk.eyJ1IjoiYmlsYWxoYXNzYW4iLCJhIjoiY2pzZXBtZDlrMTVjZzQ0bzZmY29zNHozbCJ9.gIAwBp9pMmZUhWliI4CrfA";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeMap();
            await LoadAllDistricts();
        }
    }

    private async Task InitializeMap()
    {
        try
        {
            await JS.InvokeVoidAsync("mapboxInterop.initializeMap", mapboxAccessToken, "map");
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to initialize map: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task LoadAllDistricts()
    {
        // Cancel any ongoing operation
        cts?.Cancel();
        cts = new CancellationTokenSource();

        try
        {
            displayedFeatures.Clear();
            errorMessage = null;
            StateHasChanged();

            await foreach (var feature in GeoJsonService.GetAllDistrictsAsync().WithCancellation(cts.Token))
            {
                if (cts.Token.IsCancellationRequested)
                {
                    break;
                }

                displayedFeatures.Add(feature);

                // Update map in batches (every 10 items)
                if (displayedFeatures.Count % 10 == 0)
                {
                    await UpdateMapAsync();
                }
            }

            // Final update to ensure all features appear
            if (!cts.Token.IsCancellationRequested)
            {
                await UpdateMapAsync();
            }
        }
        catch (OperationCanceledException)
        {
            // Ignore cancellation
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load districts: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task InvokeSearch()
    {
        // Immediately cancel any ongoing tasks and clear the map, like HideAll does
        await HideAll();

        // Create a new cancellation token for this search
        cts = new CancellationTokenSource();

        try
        {
            errorMessage = null;
            StateHasChanged();

            if (string.IsNullOrWhiteSpace(searchQuery))
            {
                errorMessage = "Please enter a search term.";
                StateHasChanged();
                return;
            }

            // Split the search query by commas and trim each entry to support multiple names
            var names = searchQuery
                .Split(',', StringSplitOptions.RemoveEmptyEntries)
                .Select(name => name.Trim())
                .ToList();

            await foreach (var feature in GeoJsonService.FilterByNameAsync(names).WithCancellation(cts.Token))
            {
                if (cts.Token.IsCancellationRequested)
                {
                    break;
                }

                displayedFeatures.Add(feature);

                // Update the map after each feature is added, if desired.
                // If you prefer to update only once after the loop, remove this call.
                await UpdateMapAsync();
            }

            if (!cts.Token.IsCancellationRequested)
            {
                await UpdateMapAsync();
            }
        }
        catch (OperationCanceledException)
        {
            // Ignore cancellation
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to search districts: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task HideAll()
    {
        try
        {
            // Cancel any ongoing operations, clear the list, and remove the map layer
            cts?.Cancel();
            displayedFeatures.Clear();
            await JS.InvokeVoidAsync("mapboxInterop.removeLayer", "districtsLayer");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to hide districts: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task Reload()
    {
        await LoadAllDistricts();
    }

    private async Task UpdateMapAsync()
    {
        try
        {
            var geoJson = new
            {
                type = "FeatureCollection",
                features = displayedFeatures
            };

            await JS.InvokeVoidAsync("mapboxInterop.addGeoJsonLayer", "districtsLayer", geoJson);
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to update map: {ex.Message}";
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        cts?.Cancel();
    }
}
