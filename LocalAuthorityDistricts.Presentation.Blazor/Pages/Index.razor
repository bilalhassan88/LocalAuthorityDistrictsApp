@page "/"
@using System.Net.Http.Json
@using Domain
@inject HttpClient Http
@inject IJSRuntime JS

<h3>Local Authority Districts (Read-Only)</h3>

<input type="text" @bind="searchQuery" @oninput="OnSearchInput" placeholder="Search by name..." />
<button @onclick="HideAll">Hide All</button>

<div id="map" style="width: 100%; height: 600px;"></div>

@code {
    private List<Feature> displayedFeatures = new();
    private string searchQuery;

    private readonly string mapboxAccessToken = "pk.eyJ1IjoiYmlsYWxoYXNzYW4iLCJhIjoiY2pzZXBtZDlrMTVjZzQ0bzZmY29zNHozbCJ9.gIAwBp9pMmZUhWliI4CrfA";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeMap();
            await LoadAllDistricts();
        }
    }

    private async Task InitializeMap()
    {
        await JS.InvokeVoidAsync("mapboxInterop.initializeMap", mapboxAccessToken, "map");
    }

    private async Task LoadAllDistricts()
    {
        var features = await Http.GetFromJsonAsync<List<Feature>>("api/districts/all");
        if (features is not null)
        {
            displayedFeatures = features;
            await UpdateMap(displayedFeatures);
        }
    }

    private async Task OnSearchInput(ChangeEventArgs e)
    {
        searchQuery = e?.Value?.ToString() ?? "";
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            await LoadAllDistricts();
        }
        else
        {
            var filtered = await Http.GetFromJsonAsync<List<Feature>>($"api/districts/filter?name={searchQuery}");
            displayedFeatures = filtered ?? new();
            await UpdateMap(displayedFeatures);
        }
    }

    private async Task HideAll()
    {
        displayedFeatures.Clear();
        await JS.InvokeVoidAsync("mapboxInterop.removeLayer", "districtsLayer");
    }

    private async Task UpdateMap(List<Feature> features)
    {
        var geoJson = new {
            type = "FeatureCollection",
            features = features
        };
        await JS.InvokeVoidAsync("mapboxInterop.addGeoJsonLayer", "districtsLayer", geoJson);
    }

    // same local model classes...
}
